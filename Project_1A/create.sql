CREATE TABLE IF NOT EXISTS Movie (
id INT PRIMARY KEY NOT NULL,
title VARCHAR(100) NOT NULL,
year INT NOT NULL,
rating VARCHAR(10) NOT NULL,
company VARCHAR(50) NOT NULL
);


CREATE TABLE IF NOT EXISTS Actor (
id INT PRIMARY KEY NOT NULL,
last VARCHAR(20) NOT NULL,
first VARCHAR(20) NOT NULL,
sex VARCHAR(6) NOT NULL,
dob DATE NOT NULL,
dod DATE
);


CREATE TABLE IF NOT EXISTS Sales (
mid INT NOT NULL,
ticketsSold INT NOT NULL,
totalIncome INT NOT NULL,
FOREIGN KEY fk_mid(mid)
REFERENCES Movie(id)
ON UPDATE CASCADE
ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS Director (
id INT PRIMARY KEY NOT NULL,
last VARCHAR(20) NOT NULL,
first VARCHAR(20) NOT NULL,
dob DATE NOT NULL,
dod DATE
);


CREATE TABLE IF NOT EXISTS MovieGenre (
mid INT NOT NULL,
genre VARCHAR(20) NOT NULL,
FOREIGN KEY fk_mid(mid)
REFERENCES Movie(id)
ON UPDATE CASCADE
ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS MovieDirector (
mid INT NOT NULL, 
did INT NOT NULL,
FOREIGN KEY fk_mid(mid)
REFERENCES Movie(id)
ON UPDATE CASCADE
ON DELETE CASCADE,
FOREIGN KEY fk_did(did)
REFERENCES Director(id)
ON UPDATE CASCADE
ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS MovieActor (
mid INT NOT NULL, 
aid INT NOT NULL, 
role VARCHAR(50) NOT NULL,
FOREIGN KEY fk_mid(mid)
REFERENCES Movie(id)
ON UPDATE CASCADE
ON DELETE CASCADE,
FOREIGN KEY fk_aid(aid)
REFERENCES Actor(id)
ON UPDATE CASCADE
ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS MovieRating (
mid INT NOT NULL, 
imdb INT NOT NULL, 
rot INT NOT NULL,
FOREIGN KEY fk_mid(mid)
REFERENCES Movie(id)
ON UPDATE CASCADE
ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS Review (
name VARCHAR(20)  NOT NULL,
time TIMESTAMP  NOT NULL,
mid INT  NOT NULL,
rating INT  NOT NULL,
comment VARCHAR(500)  NOT NULL,
PRIMARY KEY(name,time,mid)
);


CREATE TABLE IF NOT EXISTS MaxPersonID(
id INT PRIMARY KEY NOT NULL
);


CREATE TABLE IF NOT EXISTS MaxMovieID(
id INT PRIMARY KEY NOT NULL
);


CREATE TRIGGER tg_actor_maxpersonid
AFTER INSERT ON Actor
FOR EACH ROW 
  	UPDATE MaxPersonID 
  		SET id=IF(id < NEW.id, NEW.id, id);
  

CREATE TRIGGER tg_director_maxpersonid
AFTER INSERT ON Director
FOR EACH ROW
  	UPDATE MaxPersonID 
  		SET id=IF(id < NEW.id, NEW.id, id);


CREATE TRIGGER tg_movie_maxmid
AFTER INSERT ON Movie
FOR EACH ROW
  UPDATE MaxMovieID
     SET id=(SELECT max(id) FROM Movie);

